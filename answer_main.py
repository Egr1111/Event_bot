from ceredits import TOKEN_BOT, ADMIN_ID
from datetime import datetime
import json
import logging
from main import bot, dp
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.dispatcher.filters import Command, Text

from aiogram.dispatcher import FSMContext
from keyboard import choice
from newEvent import NewEvent
import datetime
import calendar
import locale

import random

locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
num = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0", " "]
with open(f'users.js', 'r', encoding='UTF-8') as file:
    users = json.load(file)

all_users = users


async def greetings_admin(message=Message):

    if str(ADMIN_ID) not in all_users[0].keys():
        print(all_users[0].keys())
        all_users[0][f"{ADMIN_ID}"] = {}
        with open(f'users.js', 'w', encoding='UTF-8') as file:
            json.dump(all_users, file, indent=4, ensure_ascii=False)

    await bot.send_message(ADMIN_ID, text=f"–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π –∞–¥–º–∏–Ω!", reply_markup=choice)

@dp.callback_query_handler(lambda call: call.data == "/cancel")
async def main_answer(call_back = CallbackQuery):
    await bot.send_message(call_back.from_user.id, "–ù—É —Ç–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=choice)

@dp.message_handler(Command("start"))
async def greetings(message=Message):
    if f"{message.from_user.id}" not in all_users.keys():
        all_users[0][f"{message.from_user.id}"] = {}
        with open(f'users.js', 'w', encoding='UTF-8') as file:
            json.dump(all_users, file, indent=4, ensure_ascii=False)

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø - –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –ª—é–¥—è–º –æ–± –∏—Ö –¥–µ–ª–∞—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ...", reply_markup=choice)


@dp.message_handler(text="üïí –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ üïí", state=None)
async def newEvent(message=Message):
    await message.answer("* - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—É—Å—Ç–æ—Ç—É, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ 'none'")
    await message.answer("–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel")
    await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è*")
    await NewEvent.logo.set()


@dp.message_handler(text="üîî –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è üîî")
async def my_events(message=Message):
    events = all_users[0][f"{message.from_user.id}"]
    if len(events.keys()) != 0:
        await bot.send_message(message.from_user.id, "–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:")
        cl = calendar
        strok = ""
        
        for i in range(len(events.keys())):
            event = events[list(events.keys())[i]]
            if event["date"] != []:
                if int(event["time"][1]) < 10:
                    strok += f"–°–æ–±—ã—Ç–∏–µ {list(events.keys())[i]} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {cl.month_name[int(event['date'][0])]} {event['date'][1]} {event['time'][0]}:0{event['time'][1]}\n{event['desc_logo']}\n"
                else:
                    strok += f"–°–æ–±—ã—Ç–∏–µ {list(events.keys())[i]} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {cl.month_name[int(event['date'][0])]} {event['date'][1]} {event['time'][0]}:{event['time'][1]}\n{event['desc_logo']}\n"
            else:
                if int(event["time"][1]) < 10:
                    strok += f"–°–æ–±—ã—Ç–∏–µ {list(events.keys())[i]} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {event['time'][0]}:0{event['time'][1]}\n{event['desc_logo']}\n"
                else:
                    strok += f"–°–æ–±—ã—Ç–∏–µ {list(events.keys())[i]} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {event['time'][0]}:{event['time'][1]}\n{event['desc_logo']}\n"

        await bot.send_message(message.from_user.id, strok, reply_markup=choice)
    else:
        await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π", reply_markup=choice)


@dp.message_handler(text="üîï –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ üîï")
async def delete_choice(message=Message):
    events = InlineKeyboardMarkup()
    if all_users[0][f"{message.from_user.id}"] != {}:
        for key, value in all_users[0][f"{message.from_user.id}"].items():
            events.add(InlineKeyboardButton(
                f"{key}", callback_data=f"/confirm {value['id']}"))
        events.add(InlineKeyboardButton(
            f"–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è", callback_data=f"/cancel"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=events)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.", reply_markup=choice)


@dp.callback_query_handler(lambda call: call.data == "üîï –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ üîï")
async def delete_choice(call_back = CallbackQuery):
    events = InlineKeyboardMarkup()
    if all_users[0][f"{call_back.from_user.id}"] != {}:
        for key, value in all_users[0][f"{call_back.from_user.id}"].items():
            events.add(InlineKeyboardButton(
                f"{key}", callback_data=f"/confirm {value['id']}"))
        events.add(InlineKeyboardButton(
            f"–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è", callback_data=f"/cancel"))
        await bot.send_message(call_back.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=events)
    else:
        await bot.send_message(call_back.from_user.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.", reply_markup=choice)


@dp.callback_query_handler(lambda call: "/confirm" in call.data.split(" ") and len(call.data.split(" ")) == 2)
async def delete_confirm(call_back=CallbackQuery):
    event = call_back.message['reply_markup']['inline_keyboard'][0][0]['callback_data'].split(" ")
    events = all_users[0][f"{call_back.from_user.id}"]
    count = 0
    for key, value in events.items():
        if value["id"] == event[1]:
            count += 1
            confirm = InlineKeyboardMarkup()
            cl = calendar
            await bot.send_message(call_back.from_user.id, "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ?")
            confirm.add(InlineKeyboardButton(
                "–î–∞", callback_data=f"/delete {value['id']}"))
            confirm.add(InlineKeyboardButton(
                "–ù–µ—Ç", callback_data=f"üîï –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ üîï"))

            if value["date"] != []:
                if int(value["time"][1]) < 10:
                    await bot.send_message(
                        call_back.from_user.id, f"–°–æ–±—ã—Ç–∏–µ {key} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {cl.month_name[int(value['date'][0])]} {value['date'][1]} {value['time'][0]}:0{value['time'][1]}\n{value['desc_logo']}\n", reply_markup=confirm)
                else:
                    await bot.send_message(
                        call_back.from_user.id, f"–°–æ–±—ã—Ç–∏–µ {key} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {cl.month_name[int(value['date'][0])]} {value['date'][1]} {value['time'][0]}:{value['time'][1]}\n{value['desc_logo']}\n", reply_markup=confirm)
            else:
                if int(value["time"][1]) < 10:
                    await bot.send_message(
                        call_back.from_user.id, f"–°–æ–±—ã—Ç–∏–µ {key} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {value['time'][0]}:0{value['time'][1]}\n{value['desc_logo']}\n", reply_markup=confirm)
                else:
                    await bot.send_message(
                        call_back.from_user.id, f"–°–æ–±—ã—Ç–∏–µ {key} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {value['time'][0]}:{value['time'][1]}\n{value['desc_logo']}\n", reply_markup=confirm)
    if count == 0:
        await bot.send_message(
            call_back.from_user.id, f"–≠—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=choice)


@dp.callback_query_handler(lambda call: "/delete" in call.data.split(" ") and len(call.data.split(" ")) == 2)
async def delete_confirm(call_back=CallbackQuery):
    event = call_back.message['reply_markup']['inline_keyboard'][0][0]['callback_data'].split(
        " ")
    new_dict = all_users[0][f"{call_back.from_user.id}"]
    print(new_dict)
    new_dict = {key: value for key,
                 value in new_dict.items() if value["id"] != event[1]}
    all_users[0][f"{call_back.from_user.id}"] = new_dict
    with open(f'users.js', 'w', encoding='UTF-8') as file:
        json.dump(all_users, file, indent=4, ensure_ascii=False)

    await bot.send_message(call_back.from_user.id, "–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ", reply_markup=choice)


@dp.message_handler(text="üö´ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è üö´")
async def destroy_choice(message = Message):
    if all_users[0][f"{message.from_user.id}"] != {}:
        last_choice = InlineKeyboardMarkup()
        last_choice.add(InlineKeyboardButton("–î–∞", callback_data=f"/destroy"))
        last_choice.add(InlineKeyboardButton(
            "–ù–µ—Ç", callback_data=f"/cancel"))
        await bot.send_message(message.from_user.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —ç—Ç–æ–º?", reply_markup=last_choice)
    else:
        await bot.send_message(message.from_user.id, "–£ –í–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π", reply_markup=choice)

    

@dp.callback_query_handler(lambda call: call.data == "/destroy")
async def destroy_events(call_back = CallbackQuery):
    all_users[0][f"{call_back.from_user.id}"] = {}
    with open(f'users.js', 'w', encoding='UTF-8') as file:
        json.dump(all_users, file, indent=4, ensure_ascii=False)

    await bot.send_message(call_back.from_user.id, "–í—Å–µ –∏–º–µ—é—â–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è –±—ã–ª–∏ —Å—Ç–µ—Ä—Ç—ã.", reply_markup=choice)
    
    


@dp.message_handler(state=NewEvent.logo)
async def logo(message=Message, state=FSMContext):
    if message.text != "/cancel":
        answer = message.text
        async with state.proxy() as data:
            data["logo"] = answer
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")

        await NewEvent.desc_logo.set()

    else:
        await state.reset_state(with_data=False)
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)


@dp.message_handler(state=NewEvent.desc_logo)
async def desc_logo(message=Message, state=FSMContext):
    if message.text != "/cancel" and message.text != "none":
        answer = message.text
        async with state.proxy() as data:
            data["desc_logo"] = answer
        await message.answer("–î–∞—Ç–∞(–º–µ—Å—è—Ü, –¥–µ–Ω—å). –ó–∞–ø–æ–ª–Ω—è—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏! –ï—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ 'none', —Ç–æ –¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –Ω–æ –µ—Å–ª–∏ –≤—ã —Ä–µ—à–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É —á–∞—Å—Ç—å —Ñ–æ—Ä–º—ã, —Ç–æ, –ø–æ–∂–∞–ª—É—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –º–µ—Å—è—Ü –∏ –¥–∞—Ç—É –≤–º–µ—Å—Ç–µ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫.")
        await NewEvent.date.set()
    elif message.text == "none":
        async with state.proxy() as data:
            data["desc_logo"] = ""

        await message.answer("–î–∞—Ç–∞(–º–µ—Å—è—Ü, –¥–µ–Ω—å). –ó–∞–ø–æ–ª–Ω—è–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏! –ï—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ 'none', —Ç–æ –¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –Ω–æ –µ—Å–ª–∏ –≤—ã —Ä–µ—à–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É —á–∞—Å—Ç—å —Ñ–æ—Ä–º—ã, —Ç–æ, –ø–æ–∂–∞–ª—É—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω—è–π—Ç–µ –º–µ—Å—è—Ü –∏ –¥–∞—Ç—É –≤–º–µ—Å—Ç–µ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫.")
        await NewEvent.date.set()
    else:
        await state.reset_state(with_data=False)
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)


@dp.message_handler(state=NewEvent.date)
async def date(message=Message, state=FSMContext):
    count = 0
    if message.text != "/cancel" and message.text != "none":
        for i in message.text:
            if i not in num:
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ñ–æ—Ä–º–∞! –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=choice)
                await state.reset_state(with_data=False)
                count += 1
                break
        if count != 1:
            answer = message.text.split(" ")
            print(answer)
            while "" in answer:
                answer.remove("")
            for i in answer:
                print(i)
                
                if int(i) < 10 and len(i) > 1:
                    answer[answer.index(i)] = i.replace("0", "")
            print(answer)
            for i in answer:
                print(i, answer.index(i))
                if len(answer) == 1:
                    print(1)
                    await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ñ–æ—Ä–º–∞! –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)
                    await state.reset_state(with_data=False)
                    break
                if (len(i) > 2 or int(i) > 12 or int(i) < 1) and answer.index(i) == 0:
                    print(2)
                    await state.reset_state(with_data=False)
                    await message.answer("–ù–µ –±—ã–≤–∞–µ—Ç " + i + " –º–µ—Å—è—Ü–∞! –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)
                    break

                elif (len(i) > 2 or int(i) > 31 or int(i) < 1) and answer.index(i) == 1:
                    print(3)
                    await state.reset_state(with_data=False)
                    await message.answer("–ù–µ –±—ã–≤–∞–µ—Ç " + i + " –¥–Ω—è! –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)
                    break
                elif answer.index(i) + 1 == len(answer):
                    print(4)
                    try:
                        date = datetime.datetime(
                            2021, int(answer[0]), int(answer[1]))
                        async with state.proxy() as data:
                            data["date"] = answer
                        await message.answer("–í—Ä–µ–º—è(–ß–∞—Å*, –º–∏–Ω—É—Ç–∞)")
                        print(4.1)
                        await NewEvent.time.set()
                    except:
                        print(4.2)
                        await state.reset_state(with_data=False)
                        await message.answer("–ù–µ –±—ã–≤–∞–µ—Ç " + i + " –¥–Ω—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ! –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)

    elif message.text == "none":
        async with state.proxy() as data:
            data["date"] = []
            await message.answer("–í—Ä–µ–º—è(–ß–∞—Å*, –º–∏–Ω—É—Ç–∞)")
            await NewEvent.time.set()

    else:
        await state.reset_state(with_data=False)
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)


@dp.message_handler(state=NewEvent.time)
async def time(message=Message, state=FSMContext):
    count = 0
    if message.text != "/cancel" and message.text != "none":

        for i in message.text:
            if i not in num:
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ñ–æ—Ä–º–∞! –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)
                await state.reset_state(with_data=False)
                count += 1
                break
        if count != 1:
            answer = message.text.split(" ")
            print(answer)
            while "" in answer:
                answer.remove("")
            print(answer)
            for i in answer:
                if int(i) < 10 and len(i) > 1:
                    answer[answer.index(i)] = i.replace("0", "")
                elif int(i) < 10 and int(i) == 0:
                    answer[answer.index(i)] = "0"
            print(answer)

            for i in answer:
                if (len(i) > 2 or int(i) > 24 or int(i) < 1) and answer.index(i) == 0:
                    await state.reset_state(with_data=False)
                    await message.answer("–ù–µ –±—ã–≤–∞–µ—Ç " + i + " —á–∞—Å–∞! –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)
                    break

                elif (len(i) > 2 or int(i) > 59 or int(i) < 0) and answer.index(i) == 1:
                    await state.reset_state(with_data=False)
                    await message.answer("–ù–µ –±—ã–≤–∞–µ—Ç " + i + " –º–∏–Ω—É—Ç—ã! –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)
                    break

                elif answer.index(i) + 1 == len(answer) and len(answer) == 1:
                    async with state.proxy() as data:
                        data["time"] = [answer[0], "0"]
                    await message.answer("–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ", reply_markup=choice)
                    await NewEvent.time.set()

                    form = await state.get_data()
                    print(form)
                    id = random.randint(1, 1000000000000000000000000)
                    list_id = []
                    for key, value in all_users[0][f"{message.from_user.id}"].items():
                        if value != {}:
                            list_id.append(value["id"])
                    
                    while f"{id}" in list_id:
                        id = random.randint(1, 1000000000000000000000000)
                    all_users[0][f"{message.from_user.id}"][form["logo"]] = {
                        "desc_logo": form["desc_logo"],
                        "date": form["date"],
                        "time": form["time"],
                        "viewed": False,
                        "id": f"{id}"
                    }

                    with open(f'users.js', 'w', encoding='UTF-8') as file:
                        json.dump(all_users, file, indent=4,
                                  ensure_ascii=False)
                    await state.reset_state(with_data=False)

                elif answer.index(i) + 1 == len(answer) and len(answer) == 2:
                    async with state.proxy() as data:
                        data["time"] = answer
                    await message.answer("–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ", reply_markup=choice)
                    await NewEvent.time.set()

                    form = await state.get_data()
                    print(form)
                    id = random.randint(1, 1000000000000000000000000)
                    list_id = []
                    for key, value in all_users[0][f"{message.from_user.id}"].items():
                        if value != {}:
                            list_id.append(value["id"])

                    while f"{id}" in list_id:
                        id = random.randint(1, 1000000000000000000000000)
                    all_users[0][f"{message.from_user.id}"][form["logo"]] = {
                        "desc_logo": form["desc_logo"],
                        "date": form["date"],
                        "time": form["time"],
                        "viewed": False,
                        "id": f"{id}"
                    }

                    with open(f'users.js', 'w', encoding='UTF-8') as file:
                        json.dump(all_users, file, indent=4,
                                  ensure_ascii=False)
                    await state.reset_state(with_data=False)
    elif message.text == "none":
        async with state.proxy() as data:
            await message.answer("–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–æ—Ç—è –±—ã —á–∞—Å—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)
            await state.reset_state(with_data=False)
    else:
        await state.reset_state(with_data=False)
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)
